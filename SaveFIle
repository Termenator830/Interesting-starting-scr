#Size coimparison
type - <class 'dict'>, len - 100, size - 2620         #   {i:i for i in range(100)}
type - <class 'set'>, len - 100, size - 4212          #   {i for i in range(100)}
type - <class 'list'>, len - 100, size - 460            #   [i for i in range(100)]
type - <class 'tuple'>, len - 100, size - 428         #   tuple((i for i in range(100)))
type - <class 'generator'>, len - 100, size - 48   #   (i for i in range(100))

| Use case                        | Use this     |
|----------------------------------|--------------|
| Ordered simple items             | `list`       |
| Unique unordered items           | `set`        |
| Key → Value mapping              | `dict`       |
| Need fast lookup                 | `set` / `dict` |
| Tiny memory budget               | `list`       |


#Calculator 

a = float(input())
b = float(input())
act = input()

if (act=="/" or act=="mod" or act=="div") and b==0:
    c = "Деление на 0!"
elif act=="+":    c = a + b
elif act=="-":    c = a - b
elif act=="/":    c = a / b
elif act=="*":    c = a * b
elif act=="mod":  c = a % b
elif act=="pow":  c = a ** b
elif act=="div":  c = a // b

print (c) 

#Labeling 

n = int(input()) 

if n % 10 in [1] and not ( n % 100 == 11 ) : 
  print(n, "программист")

elif n % 10 in [2, 3, 4] and not ( 12 <= n % 100 <= 14 ) :
  print(n, "программиста") 

else : 
  print(n, "программистов") 


#Lucky Ticket 

n = int(input()) 

a = n // 100000 % 10 
b = n // 10000 % 10 
c = n // 1000 % 10 
d = n // 100 % 10 
e = n // 10 % 10 
f = n % 10 

if a + b + c == d + e + f: 
    print('Счастливый')
elif a + b + c != d + e + f : 
    print('Обычный')

#Sum 

a = int(input()) 
s = a
while not a == 0 :
  a = int(input()) 
  s += a 
print(s)

#НОД 

a = int(input())
b = int(input())

d = 2  # начинаем с первого возможного делителя > 1

while d <= a and d <= b:
    if a % d == 0 and b % d == 0:
        print("Наименьший общий делитель:", d)
        break
    d += 1
else:
  print("Нет общих делителей кроме 1") 

#Таблица умножения 
a = int(input())
b = int(input())

for i in range(a, b + 1):
  print('', i, end="\n\n") 

for j in range(c, d+1): 
  print('\t', j, end='\t') 
print()

#i for range 

a, b = (int(i) for i in input().split())
s = 0
n = 0
for i in range(a, b + 1):
  if i % 3 == 0:
    s += i
    n += 1
s = s / n
print(s)

#indexing 

genome = 'ATGG'

genome[0] = 'A'
genome[-4] = 'A'

=> genome = 'ATGG'
for i in range(4):
  print(genome[i]) 

or

genome = 'ATGG'
for i in genome:
  print(i)

genome = 'ATSGD'
print(genome.count('C')) 

if 'TG' in s: 
s.upper().count('gt'.upper())

#Slicing

dna = 'ATTCGGAGCT'
dna[1:4:2] 
dna[::-1] = TCGAGGCTTA

genom = input()
n = len(genom)

#Save Memory
genom = input()
n = len(genom)

i = 0
while i < n:
    s = 1
    while i + 1 < n and genom[i] == genom[i + 1]:
        s += 1
        i += 1
    print(genom[i] + str(count))
    i += 1

print('end') 

#Lists 

students = ['Ivan', 'Masha', 'Sasha']
print(students[1:3]) 
List1 + List2 = List1, List2
List * 2 = List, List
* List elements are CHANGABLE 
* List.append['Olga'] - add 1 item to the box
* List += ['Boris'] - expand by range 
* List.insert(1, 'Olga') - add on place 

* del students[1:3]
* students.remove('Sasha') 

* if ... (not) in List
* ind = students.index('Sasha')

* ordered_students = sorted(students)
* students.sort

* min(students) 
* max(students) 

* students.reserse() - change List's state
* reversed(students) <=> students[::-1] - use as reversed 

                    ГЕНЕРАЦИЯ СПИСКОВ 

a = [0]*5 
a = [0 for i in range(5)]
a = [i*i for i in range(5)]
a = [int(i) for i in input().split()] 

#Сумма
a = [int(i) for i in input().split()] 
s = 0

for i in a:
    s += i
print(s)

#Alg

a = [int(i) for i in input().split()]
n = len(a)

for i in range(n):
    if i == 0:
        print(a[1] + a[-1], end=' ')
    elif i == n - 1:
        print(a[-2] + a[0], end=' ')
    else:
        print(a[i - 1] + a[i + 1], end=' ')

#Return same values

a = [int(i) for i in input().split()]
a.sort()
n = len(a)

i = 0
while i < n - 1:
    if a[i] == a[i + 1]:
        print(a[i], end=' ')
        while i < n - 1 and a[i] == a[i + 1]:
            i += 1
    i += 1 

    ДВУМЕРНЫЕ СПИСКИ 

a = [[1,2,3],[4,5,6],[7,8,9]] - matrix 3x3
a[1][1] - stroke number, field number 
a = [[0]*n]*n
a[0][0] = 5 - changes all lists as in original stroke

Generators: 
a = [[0] * n for i in range(n)]
a = [[0 for j in range(n)] for i in range(n)]

#Count Matrix 
n = 3
count = 1
a = [[0 for j in range(n)] for i in range(n)]

for i in range(n):
    for j in range(n):
        a[i][j] = count
        count += 1

#Edit Matrix

b = [int(y) for y in input().split()]

for i in range(n):
    for j in range(m):
        if i == b[0] and j == b[1]:
            a[b[0] - 1][b[1] - 1] = -1
        else: a[i][j] = 0

for i in range(n):
    for j in range(m):
        print(a[i][j], end='\t')
    print() 

#Mine FIeld

n, m, k = (int(i) for i in input().split())
a = [[0 for i in range(m)] for j in range(n)]
for i in range(k):
    row, col = [int(i) - 1 for i in input().split()]
    a[row][col] = -1
for i in range(n):
    for j in range(m):
        if a[i][j] == 0:
            for di in range(-1, 2):
                for dj in range(-1, 2):
                    ai = i + di
                    aj = j + dj
                    if 0 <= ai < n and 0 <= aj < m and a[ai][aj] == -1:
                        a[i][j] += 1
for i in range(n):
    for j in range(m):
        if a[i][j] == -1:
            print('*', end='')
        elif a[i][j] == 0:
            print('.', end='') 
        else:
            print(a[i][j], end='')
    print()

#Run first loop with no req 

s = 0
d = 0
first_cycle = True

while d != 0 or first_cycle:
    first_cycle = False
    try:
        k = int(input())
    except EOFError:
        break
    s += k ** 2
    d += k
print(s)

#Lists setting

a = int(input())
res = []
n = 1

while len(res) < a:
    for i in range(n):
        if len(res) >= a:
            break
        res.append(n)
    n += 1

print(*res)

#Remake matrix

a = []
k = 0

while True:
    s = input()
    if s == 'end':
        break
    b = [int(i) for i in s.split()]
    a.append(b)
    k += 1

n = len(a)

for i in range(k):  # fix here — no need for k+1
    for j in a[i]:
        print(j, end=' ')
    print()

#Edit Matrix

a = []
k = 0

while True:
    s = input()
    if s == 'end':
        break
    b = [int(i) for i in s.split()]
    a.append(b)
    k += 1
n = len(a[0])

result = []

for i in range(k):
    row = []
    for j in range(n):
        up = a[i - 1][j] if i > 0 else a[k - 1][j]
        down = a[i + 1][j] if i < k - 1 else a[0][j]
        left = a[i][j - 1] if j > 0 else a[i][n - 1]
        right = a[i][j + 1] if j < n - 1 else a[i][0]
        row.append(up + down + left + right)
    result.append(row)
    
for row in result:  # fix here — no need for k+1
    for j in row:
        print(j, end=' ')
    print()

#Add Sublist 
b.append(list(range(k, n + 1)))

#NxN Matrix

n = int(input())
a = []
k = 1  # first number

for i in range(n):
    b = []
    for j in range(n):
        b.append(k)
        k += 1
    a.append(b)

for row in a:
    for j in row:
        print(j, end=' ')
    print()

#Build 0xN Matrix

n = int(input())
a = []

a = [[0 for j in range(n)] for i in range(n)]

for i in range(n):
    for j in range(n):
        print(a[i][j], end=' ')
    print()

#Matrix Spiral

n = int(input())
a = [[0 for _ in range(n)] for _ in range(n)]

top = 0
bottom = n - 1
left = 0
right = n - 1
k = 1

while k <= n * n:
    # → Fill top row
    for j in range(left, right + 1):
        a[top][j] = k
        k += 1
    top += 1

    # ↓ Fill right column
    for i in range(top, bottom + 1):
        a[i][right] = k
        k += 1
    right -= 1

    # ← Fill bottom row
    for j in range(right, left - 1, -1):
        a[bottom][j] = k
        k += 1
    bottom -= 1

    # ↑ Fill left column
    for i in range(bottom, top - 1, -1):
        a[i][left] = k
        k += 1
    left += 1

# Print the matrix
for row in a:
    for val in row:
        print(val, end=' ')
    print()

                                                ФУНКЦИИ

* def - определить функцию
* return - закончить и вернуть значение
• what starts in function stays in function
•  Списки, словари, множества - это изменяемые объекты
• Числа, строки, кортежи - это неизменяемые объекты

#example
a = 0

def init_values(a):
    a = 100
    return(a)
print(init_values(a))

#min

a = [0, 1, 3, 4, -1, -100]

def my_min(*args):
    m = args[0]
    for x in args:
        if m > x:
            m = x
    return m
print(my_min(*a))

#range in list

def my_range(start, stop, step=1):
    res = []
    if step > 0:
        x = start
        while x < stop:
            res += [x]
            x += step
    elif step < 0:
        x = start
        while x > stop:
            res += [x]
            x += step
    return(res)
print(my_range(stop = 20, start = 5))

#Modify list + safe cycle

def modify_list(l):
    for i in range(len(l) - 1, -1, -1):
        if l[i] % 2 != 0:
            del l[i]
        else:
            l[i] //= 2

a = [1, 2, 3, 4, 5, 6]
modify_list(a)
print(a)

#In-place assignment

def modify_list(l):
    l[:] = [i//2 for i in l if i % 2 == 0]1] 

                        МНОЖЕСТВА 

* s = set() - empty set
* basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
- print(basket) - {'orange', 'banana', 'pear', 'apple'}
* 'orange' in basket
* s.add(element)
* s.remove(element) - error if none
* s.discard(element) - no error if none
* s.clear() - clear set

#Example
basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
for x in basket:
  print(x) - outputs banana, apple, orange, pear 

                        СЛОВАРИ 

* d = dict() or d = {} - empty dictionary 
* d = {'a': 239,10:100}, a - key, 239 - value
* key in dictionary
* dictionary[key] = value
* dictionary[key] - might give error
* dictionary.get[key] - stable
* del dictionary[key] 
• Dictionaries or changable
• Keys are unchangable 

* Перебрать словарь
d = {'C':14, 'A':12}
for key in d:
    print(key, end=' ') -- C A 
for key in d.keys():
    print(key, end=' ') -- C A 
for value in d.values():
    print(value, end=' ') -- 14 12
for key, value in d.items():
    print(key, value, end=' ') -- C 14; A 12;

#Example of list in dictionary
example = {'A': [22, 33, 44], 'B': [10, 20]}

print(example['A'][1])

#Example 
d = {}
d = {'a': 239,10:100}, a - key, 239 - value
print(d['a']) -- prints 239
print(d[10]) -- prints 100

#Loop example
for key in d:
    print(key, d[key])

#Build keys 
def update_dictionary(d, key, value):
    try:
        for i in d:
            if not isinstance(d[i], list):
                d[i] = [d[i]]
        if key in d:
            d[key].append(value)
        elif 2 * key in d:
            d[2 * key].append(value)
        else:
            d[2 * key] = [value]
    except TypeError:
        pass

#Put to dictionary 
a = [str(i) for i in input().split()]
key = 1
d = {key: a}
for a in d[key]:
    print(a) 

#Optimized functioning 
d = {}
n = int(input())

for _ in range(n):
    x = int(input())
    if x in d:
        print(d[x])
    else:
        d[x] = f(x)
        print(d[x])

                    ФАЙЛЫ/FILES
ИЗ:
* inf = open('текст.txt', 'r') - open file
* s1 = inf.readline() - read 1 line
* inf.close() - close file
* s = inf.readline().strip()
* import os
    os.path.join('.', 'dirname', 'filename.txt') -- Вывод зависит от используемой ОС
* "\\".join(parts)

В:
* ouf = open('file.txt', 'w')
* ouf.write('Some text\n')
* ouf.write(str(25))
* ouf.close() 

* Auto-close: 
with open('текст.txt', 'r') as inf: -- with _ as _ конструкция
  s2 = inf.readline()
print(s2)

* Построчное чтение файла
with open('input.txt') as inf:
    for line in inf:
        line = line.strip()
        print(line)

#Example 
with open('text.txt', 'w') as ouf:
    ouf.write('Some text\n')
    ouf.write(str(25))

#Format for OS

import os

def build_path(system, *parts):
    if system.lower() == "windows":
        return "\\".join(parts)
    else:
        return "/".join(parts)
        
path_linux = build_path("Linux", "home", "mikhail", "projects", "script.py")
print("Linux-style path:", path_linux)

path_windows = build_path("Windows", "C:", "Users", "Mikhail", "Desktop", "file.txt")
print("Windows-style path:", path_windows)
