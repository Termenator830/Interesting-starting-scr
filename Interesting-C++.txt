"Roses are red, violets are blue, i keep trying to learn more" 

C++ - compiling programming language(differce for each OS, low-level language, statistically typed(each entity has it's type), multiparadigm, compiled(do only what was assigned, can catch errors))
C++ language standart has around 1340 pages 
Creator of C++ is Бьёрн Страуструп (Bell Labs company) 
first compilator - cfront
first name - "C with classes"

FireBase Studio --generate apps with ai 

Compilator transfers C++ code to a machine code to execute. Compiling is not very reversible 
App architect --> programming --> compilation --> execution --> translation 

•linking(componing) -- link multiple files 

•Division of a program by files(structure, coop compilation, easier recompilation) 
2 types:
1)file with source code(extension .cpp, .c++, .cc, .cxx, .cp, etc)
2)header files(.hpp, .h)

•Definitions:
<< <=> Send this value into the output stream.
flush <=> “Сбрасывает буфер” или “принудительно выводит данные из памяти (RAM) в экран или файл”
chart <=> table, graph, сводка 
; <=> 'I finished right there, move on' 
enum <=> enum (сокращение от enumeration — перечисление) — это пользовательский тип данных, который позволяет дать имена наборам целых чисел. -- string-like, used in switching(E.J.) 
benchmark <=> performance test, эталон, metrics 
alias <=> псевдоним, E.j. int& p = x 
ram <=> random access memory
stack memory(in RAM) <=> handled automatically
heap memory(in RAM) <=> handled manually
operand <=> thing, to which operator is used (x, y, etc) 
stored inlined <=> no memory taken, directly to machine code 
Debug and release modes 
.inl, .ttp, .cuh 
Ctlr D, Ctrl Z <=> stop cin 
IP <=> instruction pointer
vector
pre-increment > post-increment, bc not making a copy 

#include <iostream> -- get from standart lib(in/out). use "..." to get from your file 

using namespace std; -- standart ns, also can use 'using std::cout'.
int main() {something} -- start program, send return code as int(to system)
{
  cout << "Hello World!" << endl; -- cout <=> output terminal, endl <=> \n and flush
  cout << "Hello World!" << flush; -- flush without \n
  cout << "Hello World!\n"; -- \n without flush
  return 0;
}

&Example
#include <iostream>   --preprocessor, lib file (local file if "something") 
#include <string>
#include <cmath>

using namespace std;

int main() 
{
string characterName = "John";
int characterAge = 70;
int childNum;
char grade = 'A' -- char object uses 1 byte 
childNum = 40; -- delay assidning a variable
float price = 70.5;
double nums = 7;
bool isMale = true;
cout << "There once was a man named " << characterName.length() << "\n"; -- variable separated 
cout << "He was " << characterAge << " years old" << endl;
characterName = "Tom"
cout << "He likes the name " << characterName << "\n" << flush;
return 0;
}

* phrase.length() -- return length of a string
* phrase[0] = B -- index position, replaces p with B
* phrase.find("Academy", 0) -- returns inde(if word - of it's first letter), which ind to start from 
* phrase.substr(8, 7) -- (starting ind, amount of chars), if no amount mentioned - till the end 
* typeid(phrase).name() -- returns type 
* wnum += 5 -- just like in python
* sqrt(36), pow(2, 5) -- math funcs are available with cmath
* double result = round(x * 100.0) / 100.0 -- round with num of decimals, otherwise to int 
* fmax(10, 11) -- return max val from 2 vals 
* while cin.get() -- read char by char 

•Literators
long long x = 1231231LL; -- 64-bit
unsigned int x = 12U -- gives big number if negative tried to be set 
long double x = (up to ~10^-4932) -- longest possible 
unsigned long x = 12UL -- combine 
float x = 3.0E8 -- exponential 
short x = 235 -- 2-bit, to 32767 (memory saving purpose) 
* char   --compiled different way, so use signed or unsigned to be sure 
char + char = int 


•Operators
1)binary: + - * / %
2)unary: ++ --
--can be logical, comparison, type, shortened binarian
float f = (int)d; --make d int before ops 
int b = ++a --return new a(a + 1) - prefix increment
int c == a++ --return old a - postfix increment

&Example of ternary expression
if (d >= 0)   --applied only for the next statement 
  roots = (d > 0) ? 2 : 1   --2 if true, 1 if false
OR:
  (d > 0) ? doPositive() : doZero();

•Stack structure(example)
x = 1, y = 2, false, 2, 1, ret val, ret addr, registers --things get there in reverse order(by chunks)
frame pointer is moved, when func changed, stack pointer moves upper(deeper) 
*When summoning func, to stack are put:
1) args
2) return address
3) val of fraim pointer and proceccor's registers
4) Also, space for returning val is reserved 

•Expressions' types:
1) lvalue <=> int a, etc
2) rvalue <=> 10, 20, 'a', etc 

&Get user's input 

int main()
{
int age;
cout << "Enter your age: " << endl;
* cin >> age; -- put input data into a variable, if doesn't meet data type at all - stores 1st char 

cout << "You are " << age << " years old";
getline(cin, line) -- store input data into line var (spaces, nums, etc) 
cout << line;
return 0;
}

&Example
int main()
{
double num1, num2;
cout << "Enetr first number: ";
cin >> num1;
cout << "Enter second number: ";
cin >> num2;

cout << num1 + num2;


return 0;
}

•Array - can store multiple vals, same data type, static

#include <iostream>
using namespace std;

int main()
{
* int luckyNums[20] = {4, 8, 15, 16, 23}; -- make an array of size 20 and set some vals 
int Nums[] = {2, 3, 4}; -- size is always 3 from now 
int luckNums[20]; -- can make and assign vals later(0-vals array) 
luckNums[8] = 19
  
luckyNums[10] = 100;
cout << luckyNums[10];
return 0;
}

int numberGrid[][] = {{1,2}, {3,4}, {5,6}} -- 2D array
cout << numberGrid[2][0]

&Example
#include <iostream>
using namespace std;

int main() 
{
    int m2d[2][3] = {{1,2,3}, {4,5,6}};
    for(size_t i = 0; i != 2; ++i) {
        for (size_t j = 0; j != 3; ++j) {
            cout << m2d[i][j] << ' ';
        }
        cout << endl;
    }  
}

m[i][j] <=> *(*(m + i) + j), m[i] - int *.
m[i] <=> *(m + i), m - int **.



•functions
&Do something without returning val
#include <iostream>
using namespace std;

* void sayHi(string name, int age) -- do without returning anything. 
{
cout << "Hello " << name << " you are " << age;
}

int main()
{
sayHi("Mike");
return 0;
}

&Can also assign a function before, but setup it after main
void sayHi(string name, int age);
void sayHi(string name, int age) { 
cout << "Hello " << name << " you are " << age;
}

&Do something with args
#include <iostream>
using namespace std;

* int add(int a, int b) {
    return a + b;
}

int main() {
    int result = add(3, 7);  -- store the returned value
    cout << "The sum is: " << result << endl;

    return 0;
}


•if statements
#include <iostream>
using namespace std;

int main() {
  bool isMale = false;
  bool isTall = true;
  * if(isMale && !isTall) {          ! <=> not, && for bit ops(1.5 times faster, but unstable) 
    cout << "You are a short male";
  } else {                          -- can also do else if (...) {...}
    cout << "You are not male";
  }
  return 0;
}


•Comparisons
#include <iostream>
using namespace std;

int getMax(int num1, int num2) {
  int result;
  
  if(num1 >= num2) {result = num1;} else {result = num2;}
  
  return result;
}

int main() {

  cout << getMax(5, 10);
  return 0;
}

&Calculator
#include <iostream>
using namespace std;

int main() 
{
  int num1, num2;
  int result = 0;  // Initialize just in case, but will control printing manually
  char op;
  bool valid = true;  // Track if result is valid

  cout << "Enter first number: ";
  cin >> num1;

  cout << "Enter operator (+, -, *, /): ";
  cin >> op;

  if (op != '+' && op != '-' && op != '*' && op != '/') {
    cout << "Invalid Operator";
    return 1; -- end program
  }

  cout << "Enter second number: ";
  cin >> num2;

  if (op == '+') {
    result = num1 + num2;
  } else if (op == '-') {
    result = num1 - num2;
  } else if (op == '*') {
    result = num1 * num2;
  } else if (op == '/') {
    if (num2 == 0) {
      cout << "Cannot divide by zero!";
      valid = false; -- dont print the result if zero division 
    } else {
      result = num1 / num2;
    }
  }

  if (valid) {
    cout << "Result: " << result;
  }

  return 0;
}

•Switch Statements


&enum example 
enum Weekday {      -- defines a custom type
  SUNDAY,    // 0
  MONDAY,    // 1
  TUESDAY,   // 2
  WEDNESDAY, // 3
  THURSDAY,  // 4
  FRIDAY,    // 5
  SATURDAY   // 6
};

&Example
enum ReactorState { IDLE, CHARGING, PULSE };

ReactorState currentState = PULSE;

switch (currentState) {      -- look at dayNum, and then decide what to do 
  case IDLE:                -- same as if(dayNum == 0), must be an int, char, or enum 
    cout << "Doing nothing";
    break;
  case CHARGING:
    cout << "Applying voltage";
    break;
  case PULSE:
    cout << "ZAP!";
    break;
  default:                  -- same as else{} 
    cout << "Not available";
}

•While loops 
int main()
{
  int index = 1;
  while(index <= 5) {
    cout << "\r" << index; -- rewrite stroke 
    index++;
  }

  return 0;
}

&To survive infinity looping 
int main()
{
  int index = 6;
  do{                      --do{...}while(...) - do, then check conditions before repeating 
    cout << "\r" << index;
    index++;
  } while(index <= 5);

  return 0;
}

&Example of while and if 
#include <iostream>
#include <string>

using namespace std;

int main()
{

  int secretNum = 7;
  int guess = 0;
  int guessCount = 0;
  int guessLim = 3;
  
  while (secretNum != guess) {
    if (guessCount < guessLim) {
      cout << "Enter guess: ";
      cin >> guess;
      guessCount++;
    } else {
      cout << "Better luck next time!";
            return 1;}
  }

  cout << "You guessed!";
  
  return 0;
}

&change original

#include <iostream>
#include <string>
using namespace std;

void shout(string& msg) {    --string& mentioning makes changes be applied to original
  msg += "!!!";
}

int main() {
  string phrase = "Hello";
  shout(phrase);
  cout << phrase;  // → prints "Hello!!!"
}

•for (initialization; condition; increment) {// loop body} 
&Example
#include <iostream>
using namespace std;

void int_pow(long long& i, int exp) {  // changed int& to long long&
  long long odds = 1;                -- up to 64 bytes 
  long long base = i;  // Use a copy!
  while (exp > 0) {
    if (exp % 2 == 1) odds *= base;
    base *= base;
    exp /= 2;
  }
  i = odds;  // Update i after computing
}

int main() {
  long long i = 2;
  for (; i < 100000000000; int_pow(i, 2)) {
    cout << i << "\n";
  }

  return 0;
}

&Nested loop example 
int main() {

  int numberGrid[3][2] = {{1,2}, {3,4}, {5,6}};

  for(int i = 0; i < 3; i++) {
    for(int j = 0; j < 2; j++) {
      cout << numberGrid[i][j];
    }
    cout << "\n";  -- Newline 
  }
  
  return 0;
}

•comment through cols
/*
something
*/

•Pointer - a type of information(memory address) - use for memory optimization 

&Pointer example
int main() {

  int age = 19;
  int * pAge = &age;     --&var is address, * before var to make it a pointer
  double gpa = 2.7;
  string name = "Mike";
  string * pName = &name;
  
  cout << pAge << "\n";
  cout << &gpa << "\n";
  cout << pName << "\n";
  cout << *pAge;       -- dereference(get val by going with pointer) 
  cout << *&gpa; -- same as gpa
  
  return 0;
}

•Move in arrays by pointers - arrays and pointers are VERY close friends in C++ 
Array passed to a function becomes a pointer 
int *p = &m[0]   --address of array's starting 
int *p = &m[9]   --address of array's ending 
i = p + 2   --move to m[0+2] = m[2]
q - p   -- amount of cells(both of cells) 

&Example
int max_element(int *m, int size) {    --first element of m[]
    int max = *m;        --first assignment 
    for (int i = 1; i < size; ++i) {   --start from 2nd element 
        if (m[i] > max)      --m[i] <=> *(m + i) 
            max = m[i];
    }
    return max;
}
int* arr = new int[n];      --dynamic array allocation(n-size) 

&Use pointers in funcs, good for STL
bool contains(int *p, int *q, int value) {    --use pointer instead of var size 
    for (; p != q; ++p)
        if (*p == value)
            return true;
    return false;
}
int main() {
int arr[] = {10, 20, 30, 40};
bool found = contains(arr, arr + 4, 30);   --q = arr + 4
return 0;
}

-- int ** value can be done to make pointer to a pointer, so that you can even check array[0] 
if (!*char_pointer) --checks if the char pointer is pointing at a null char 
if (*char_pointe) -- checks if pointing at a non-null char 

&C-style stroke's length
unsigned strlen(const char *str)
{
    unsigned i = 0;
    while (*str) {
        ++i;
        ++str;
    }
    return i;
}

&Concat C-styled
void strcat(char *to, const char *from)
{
    int len = strlen(to);
    int i = 0;
    while (from[i] != '\0') {
        to[len + i] = from[i];
        ++i;
    }
    to[len + i] = '\0';
}

&Find pattern(not optimised, KMP better)
int strstr(const char *text, const char *pattern)
{
    if (pattern[0] == '\0') return 0; 

    int r = -1;
    int j = 0;
    unsigned plen = strlen(pattern);

    for (int i = 0; text[i] != '\0'; ++i) {
        if (text[i] == pattern[j]) {
            if (j == 0)
                r = i;
            ++j;
            if (j == plen)
                return r;
        } else {
            if (j > 0) {
                i -= j;
                j = 0;
            }
        }
    }
    return -1;
}

&Sort example
#include <algorithm> //здесь объявлена функция sort
using namespace std;
int a[100] = { ... };
* sort(a, a + 100);    --sort an array 

•Use heap memory with pointers
int* heapNum = new int(42);  -- simple int pointer in heap
cout << *heapNum << endl;
delete heapNum;              -- clean up

&Example
#include <iostream>
#include <string>
using namespace std;

class Book {       --doesn't consume memory(just a blueprint)
public:
    string title;
    string author;
    int pages;

    // Constructor with parameters
    Book(string t, string a, int p) {
        title = t;
        author = a;
        pages = p;
    }

    void printInfo() {
        cout << "Title: " << title << endl;
        cout << "Author: " << author << endl;
        cout << "Pages: " << pages << endl;
    }
};

int main() {
    Book* myBook = new Book("1984", "George Orwell", 328); -- a pointer
    myBook->printInfo();
    delete myBook; -- delete it
    return 0;
}

•Multi-dimensional array
int ** create_array2d(size_t rows, size_t cols) {
    int ** m = new int *[rows];
    m[0] = new int[rows * cols];
    for (size_t i = 1; i != rows; ++i) {
        m[i] = m[i - 1] + cols;    --access elim m[i-1][cols]
    return m;
    }

void free_array2d(int ** m, size_t rows, size_t cols) {
    delete [] m[0];
    delete [] m;
}

•References - unchangable, can't have 0 value, double ref doesnt exist,no memo nor math  
int &val = someArray[index];   -- refer to array's index
int (&ref)[5] = arr;   --reference to an array 
int foo(string const &s)   --make unchangable in a func, save memory 

•Structures - group vars

&Example 
#include <string>
#include <iostream> 
#include <cmath>
using namespace std;

struct Point {
    double x;
    double y;
};

struct Segment {
    Point p1;
    Point p2;
};

double length(Segment s) {
    double dx = s.p1.x - s.p2.x;    --road, (*s).p1.x or s->p1.x if pointer 
    double dy = s.p1.y - s.p2.y;
    return sqrt(pow(dx, 2) + pow(dy, 2));
}

int main() {
    setlocale(LC_ALL, "Rus");
    double x1, y1, x2, y2, x3, y3, x4, y4;
    cout << "Введите x первой точки первого отрезка=";
    cin >> x1;
    cout << "Введите y первой точки первого отрезка=";
    cin >> y1;
    cout << "Введите x второй точки первого отрезка=";
    cin >> x2;
    cout << "Введите y второй точки первого отрезка=";
    cin >> y2;
    cout << "Введите x первой точки второго отрезка=";
    cin >> x3;
    cout << "Введите y первой точки второго отрезка=";
    cin >> y3;
    cout << "Введите x второй точки второго отрезка=";
    cin >> x4;
    cout << "Введите y второй точки второго отрезка=";
    cin >> y4;
    Point p1{ x1, y1 }; Point p2{ x2, y2 }; // 1-й отрезок инициализация точек по двум координатам (x, y)
        Point p3{ x3, y3 }; Point p4{ x4, y4 }; // 2-й отрезок инициализация точек по двум координатам (x, y)
        Segment s1{ p1, p2 }; // 1-й отрезок инициализация отрезка по двум точкам 
        Segment s2{ p3, p4 }; // 2-й отрезок инициализация отрезка по двум точкам
        cout << endl << "Длинна первого отрезка s1=" << length(s1) << endl 
            << "Длинна второго отрезка s2=" << length(s2) << endl;
        return 0;
    }


&Example with pointers
#include <iostream>
using namespace std;

struct ivector3d {
    int array[3];
};

void scale(ivector3d *v, int k) {
    for (int i = 0; i < 3; ++i)
        v->array[i] *= k;
}

int main() {
    ivector3d iv3d{{1, 1, 1}};
    scale(&iv3d, 2);

    for (int i = 0; i < 3; ++i)
        cout << iv3d.array[i] << ' ';
    cout << endl;

    return 0;
}

&Constructors and deconstructors
#include <iostream>
using namespace std;

struct Point {
    Point() {
        x = y = 0;   
    }
    Point(double x, double y) {
        this->x = x;    --assign val x to struct's var x 
        this->y = y;
    }
    double x;
    double y;
};

int main() {
    Point p1;
    Point p2(3,7);  
    return 0;
}
OR:
#include <iostream>
#include <cmath>
using namespace std;

struct Point3D {
    double x, y, z;
    double length;

    // Constructor with initializer list AND body
    Point3D(double x, double y, double z)
        : x(x), y(y), z(z)  // initialize coordinates
    {
        // compute derived quantity: vector length
        length = sqrt(x * x + y * y + z * z);
        cout << "Constructed Point3D with length: " << length << endl;
    }
};

int main() {
    Point3D p(3, 4, 0);  // length should be 5
    cout << "p.x = " << p.x << ", p.length = " << p.length << endl;
    return 0;
}

•Classes and objects - data types
&Example
class Book {
  public:        --can be accessed diractl(book1.title) 
    string title;
    string author;
    int pages;
};

int main() 
{
  Book book1;                  --make an object of type 'Book'
  book1.title = "Harry Potter";  --all type's funcs/params are available 
  book1.author = "JK Rowling";
  book1.pages = 500;
  
  cout << book1.title;

  Book book2; 
  book2.title = "Lord of the Rings";
  book2.author = "Tolkein";
  book2.pages = 700;

  cout << book2.title;
  return 0;
}

&Use Constructor, function
#include <iostream>
#include <string>
using namespace std;

class Book {
public:
  string title;
  string author;
  int pages;

  Book() {      --used if no args given(constructor overloading) 
      title = "no title";
      author = "no author";
      pages = 0;
  }
  template <typename T1, typename T2, typename T3> -- any type. Book<int> pages; - if templated class    Book(T1 t, T2 a, T3 p) {  --constructor(__init__) (overloading available) 
    title = t;
    author = a;
    pages = p;
    income = (title.length() * author.length()) / 2;
  }

  void DisplayIncome() {          --object function 
    cout << "Income: " << income << endl;
  }

private:      --unable outside of class
  int income;
};

int main() 
{
  
  Book book1("Thermodynamics", "Feynman", 420);
  book1.DisplayIncome();
  
  return 0;
}

•Getters and Setters - return and modify value 
&Example
#include <iostream>
#include <string>
using namespace std;

class Book {
private:
    string rating;

public:
    string title;
    string author;
    int pages;

    Book(const string& t, const string& a, int p) {     --unmodifiable, view 
        title = t;
        author = a;
        pages = p;
        rating = "NR"; 
    }

    template <typename B>
    void setRating(B aRating) {
        if (aRating == "G" || aRating == "PG-13") {
            rating = aRating;
        } else {
            rating = "NR";
        }
    }

    string getRating() const {     --const makes var unmodifiable 
        return rating;
    }
};

•Inheritance
&Example
#include <iostream>
#include <string>
using namespace std;

class Chef {                          --superclass
  public:
    void makeChicken() {
      cout << "Making chicken" << endl;
    }
    void makeSalad() {
      cout << "Making salad" << endl;
    }
    void makeSpecialDish() {
      cout << "Making bbq" << endl;
    }
};

class ItalianChef : public Chef {          --subclass 
  public:
    void makePasta() {
      cout << "Making pasta" << endl;
    }
    void makeSpecialDish() {                --override
      cout << "Making chicken parm" << endl;
    }
};

•Macro - preprocessor command, done 
#define pi 3.14159
OR:
#define f(x) ((x) * (x)) --function
#define max3(x, y) ((x) > (y) ? (x) : (y))
*constexp () {}> macros, lets store inclined whole funcs, classes, vars 

&Example of macros usage
#define MAX(x, y, r) { \
    int banana = (x); \       --we assign var so that there is no double functioning 
    int apple = (y); \
    int max_value = ((banana) > (apple) ? (banana) : (apple)); \
    r = max_value; \
}
•Uniform initialisation   --gives error if wrong data type used 
#define MAX(a,b,c){int t1{a},t2{b};c=t1>t2?t1:t2;} -- make vars quickly 

&Dynamic arrays example(2D-like in 1D memory)
#include <iostream>
using namespace std;

int main() {
    int T;
    cin >> T;

    int** nums = new int*[T];      --pointer to pointers to int, heap mem used
    for (int i = 0; i < T; i++) {
        nums[i] = new int[2];
        cin >> nums[i][0] >> nums[i][1];
    }

    for (int i = 0; i < T; i++) {
        cout << nums[i][0] + nums[i][1] << '\n';
    }

    // Cleanup (important!)
    for (int i = 0; i < T; i++)
        delete[] nums[i];    -- delete each row
    delete[] nums;           -- delete the row pointers

    return 0;
}

&Comparance of getline() and get()
#include <iostream>
using namespace std;

int main()
{

    string c;
    getline(cin, c);
    for (int i = 0; i < c.length(); i++) {
        if (c[i] == ' ' && c[i] == c[i-1])
            {continue;} else {cout << c[i];} 
    }

    return 0;
}
OR:
char c, prev = '\0';
while (cin.get(c)) {       --read char by char
    if (c == ' ' && c == prev) continue;      --prev is previous element
    cout << c;
    prev = c;
}

* cin.get(ch, 30);   --read only 29 chars 
* cin.width(3); -- only takes 3 elements in the next cin
* cin.ignore(255, '\n').ignore(255, '\n')   --ignores up to 255 chars if no '\n' found, 2 times 
* cin.read(data, 10)   -- where to save, exactly n chars (not stopping on '\n' and etc) 
* if (ch == '0') cin.putback('#');   --put something to an income fluent 
* cin.gcount()   --return num of symbols readen in last op 

•Recursion example --C++ is not always Tail Call Optimized(do as a cycle)
int factorial(int n) {
    if (n == 0)
        return 1;
    return factorial(n - 1) * n;
}

&Reversal return recursion
#include <iostream>

using namespace std;

void rec()
{
    int a=0;
    cin >> a;
    if ( a ==0 ) return;  --exit
    rec();
    cout << a << " ";   --stacks up, then executed in a row 
   
}

int main()
{
    rec();
   
    return 0;
}

&Move array to the left
void rotate(int* a, unsigned size, int shift) {
    shift %= size;
    for (int s = 0; s < shift; ++s) {
        int first = a[0];
        for (int i = 0; i < size - 1; ++i) {
            a[i] = a[i + 1];
        }
        a[size - 1] = first;
    }
}
OR: (more speed and memory optimised)
#include <iostream>
using namespace std;

void reverse(int* m, int start, int end) {  --reverse part
    while (start < end) {
        int t = m[start];
        m[start] = m[end];
        m[end] = t;
        ++start;
        --end;
    }
}

void rotate(int* m, unsigned size, int shift) {   --reverse by parts 
    if (size == 0) return;
    shift %= size;
    if (shift == 0) return; 
    reverse(m, 0, shift - 1);
    reverse(m, shift, size - 1);
    reverse(m, 0, size - 1); 
}


int main()
{
    int m[5] = {1, 2, 3, 4, 5};
    * unsigned size = sizeof(m) / sizeof(m[0]);  --find byte length and divide 
    int d = 2;
    rotate(m, size, d);
    return 0;
}

•Dynamic Memory(mostly cstdlib lib)
void* p = &x;   --define a reference with no type 
*((int*)p);    --define type and get val 

sizeof(int) -- a compile-time operator 
size_t s = sizeof(int); -- type to assign sizeof() 

&Example of using void
void printData(void* ptr, char type) {
    if (type == 'i')
        cout << *((int*)ptr) << endl;
    else if (type == 'd')
        cout << *((double*)ptr) << endl;
    else if (type == 'c')
        cout << *((char*)ptr) << endl;
}

Functions:
Important:
 if (nums == nullptr) {        --returns nullptr if ran out of memory 
        std::cout << "Allocation failed!";
        return 1;

int* arr = new int[100];  -- allocates 100 * sizeof(int) bytes, use delete after 
1)malloc - memory allocation
int* nums = (int*)malloc(5 * sizeof(int)); --returns void* type by default
free(nums);   --must free the memory 
OR:
void *raw = malloc(size_t size) --allocate memo for unknown type 
&Example
int main() {
    void* raw = malloc(20);  -- allocate 20 bytes

    if (!raw) {
        cout << "Allocation failed!" << endl;
        return 1;
    }

    int* arr = (int*)raw;  -- cast to proper type
    arr[0] = 42;
    arr[1] = 99;

    cout << arr[0] << " " << arr[1] << endl;

    free(arr);  // always free it!
    return 0;
}

2)calloc - contiguous allocation
void *raw = calloc(10, sizeof(int));  --alloc for n elims, initial vals = 0 
3)realloc(void * ptr, size_t size) --change memory used 
arr = (int*)realloc(raw1, 50 * sizeof(int))

&Example
void* ptr = malloc(100);
ptr = realloc(ptr, 50);  --can resize even void 

4)

&Example of dynamic getline()
#include <iostream>
using namespace std;

char* getline_dynamic() {
    int n = 10;
    char* c = new char[n];
    int i = 0;
    char ch;

    while (cin.get(ch) && ch != '\n') {
        if (i >= n - 1) { -- room for '\0'
            n += 5;     --increase memory opened
            char* temp = new char[n];
            for (int j = 0; j < i; ++j) {
                temp[j] = c[j];     --copy c
            }
            delete[] c;
            c = temp;
        }
        c[i++] = ch;  --fill c
    }

    c[i] = '\0';
    return c;
}

int main() {
    cout << "Enter text: ";
    char* line = getline_dynamic();
    cout << "You entered: " << line << endl;
    delete[] line;
    return 0;
}

•Read from file
#include <string>
#include <fstream>
#include <iostream> 
using namespace std;

int main() {
    string greeting;
    string text;
    
    ofstream output("output.txt");
    output << "Hi, buddy" << endl;
    output.close();
    
    ifstream input("output.txt");
    input >> greeting;
    getline(input, text);
    input.close();
    
    cout << text;
return 0;
}

---------------------------------------------------------------------------------------------------
                                      Performance algorithms
•3-file optimization
&Bar.hpp 
#ifndef BAR_HPP     -- check if not used, name can be whatever
#define BAR_HPP      -- define, whole safety-system better be replaced with #pragma once

#include <string>
using namespace std;

class Meow {          -- declare class, vars 
public:
    enum Meows { Meow1, Meow2, Meow3 };

    Meow(int num);
    void Ayo(string hi);

private:
    int number;
    string message;
};
* extern int globalSpeed;          -- 'there is a func somewhere', without - mult.def. error 
#endif            -- end if defined

&Bar.cpp -- for fulfilling things  
#include "Bar.hpp"    --get vars' identities from header 
#include <iostream>

int globalSpeed = 10       -- define once 
Meow::Meow(int num) {    --set vals to vars in constructor
    number = num;
}

void Meow::Ayo(string hi) {      --set function's body 
    message = hi;
    cout << "Meow says: " << message << " (" << number << ")" << endl;
}

&main.cpp --launch
#include "Bar.hpp"

int main() {
    Meow cat(3);
    cat.Ayo("I want tuna");

    return 0;
}

&std::Pow() without error(O(log(n))), better than for cycle 
void int_pow(int& i, int exp) {
  int odds = 1;
  int base = i;  // copy of original i(not to overflow the program) 
  while (exp > 0) {
    if (exp % 2 == 1) {
      odds *= base;
    }
    base *= base;
    exp /= 2;
  }
  i = odds;
}

&Avoid float(better speed, less memory usage)
#include <iostream>
using namespace std;

int intLog2(int a) {
    int p = 0;
    while (a > 1) {
        a >>= 1;  // same as a = a / 2
        p++;
    }
    return p;
}

int main()
{
    int T;
    cin >> T;
    int a;
    for (int i = 0; i < T; i++) {
        cin >> a;
        cout << intLog2(a) << "\n";
    }
    return 0;
}

&GCD
unsigned gcd(unsigned a, unsigned b) {
    while (b != 0) {
        unsigned temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}


