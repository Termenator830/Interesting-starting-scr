Your name: Termenator830
Your computer's name: term830
Your username: termenator830 
Password: I_am_very_good_boy_555

1)sudo apt update && sudo apt upgrade -y 
2) sudo add-apt-repository universe
   sudo add-apt-repository multiverse
   sudo apt update 
3) sudo apt install gnome-tweaks --graphics, widgits and etc 
4) sudo apt install ubuntu-restricted-extras
5) sudo apt install openssh-client --for ssh management 
6) sudo snap install code --classic   --VS code or Sublime Text 
7) sudo apt install git --to make programming available 
8) sudo apt install tlp tlp-rdw  --battery saving system
   sudo systemctl enable tlp
   sudo systemctl start(or stop) tlp 
   sudo tlp-stat --battery info
9) sudo apt install gufw --make a firewall
    sudo ufw enable
    sudo ufw status
10) sudo apt install flatpak gnome-software-plugin-flatpak    --a new app store
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
11) sudo dpkg-reconfigure unattended-upgrades    --auto security updates 

Battery saving mode, CPU frequency when idle - manual setup
openvpn

VPN and etc setup(SSH)

1) email:
https://firstmail.ltd/webmail.com
auroraoutman1972@secadoramail.com
kbNKv1!bjv!8y!

2) hosting
htpps://vpsag.com
auroraoutman1972@secadoramail.com
njSA(*T&R*D^T)Gvih

3) admin-panel
https://212.73.150.8:63944/8itqggm97bs9gp7qzuils01b4pxd7r5g
ioi&*CH78
;OC8^Gc54467yGY

4) SSH
Use Termius for config(IOS, fully intergrated)
IP - 212.73.150.8
Name - root
Password - *V9g7v0HCg75f54^&gbnbx98*H

•Basic commands for server
  start
  stop
  restart
  reboot
  test  --get structure and info about vpn server 

•Use VPN server on a Linux pc
1) downlaod nekoray from github and unzip
2) cd ~/Downloads/nekoray-3.21-2023-09-12-linux64/nekoray --migth need to move to another dir
3) ldd nekoray --check if necessary libs installed 
on Ubuntu 24.04: sudo apt update && sudo apt install -y \
libqt5core5a \
libqt5gui5 \
libqt5widgets5 \
libqt5network5 \
libqt5svg5 \
libqt5x11extras5 \
libxcb-xinerama0 \
libxcb-icccm4 \
libxcb-image0 \
libxcb-keysyms1 \
libxcb-render-util0 \
libxcb-xfixes0 \
qt5dxcb-plugin 
4)open nekoray, in preferences:
   4.1) routing settings - set DNS to 1.1.1.1
   4.2) tun mode - set Strict Route
   4.3) right click on main panel and add new profile(from clipboard, the vless:// link must be copied) 
   4.4) enable system proxy 

•Matrix setup

1) Устанавливаем Docker и Docker Compose
   1.1) sudo apt update && sudo apt install -y ca-certificates curl gnupg
   1.2) sudo install -m 0755 -d /etc/apt/keyrings && \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
   1.3) echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   1.4) sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   1.5) sudo docker run hello-world   --check if docker works 
2) создаём рабочую папку и подготавливаем конфигурацию Synapse
   2.1) mkdir -p ~/matrix-server && cd ~/matrix-server
   2.2) curl -o docker-compose.yml https://raw.githubusercontent.com/matrix-org/synapse/develop/docker/docker-compose.yml
   2.3) mkdir -p ./data
3) настройка docker-compose и генерация конфигурации Synapse
   3.1) sudo docker run -it --rm \
-v "$(pwd)/data:/data" \
-e SYNAPSE_SERVER_NAME=localhost \
-e SYNAPSE_REPORT_STATS=no \
matrixdotorg/synapse:latest generate
4) Настройка homeserver.yaml под локальный сервер без федерации 
   4.1) sudo nano ~/matrix-server/data/homeserver.yaml    --to edit the file 
   4.2) server_name: "localhost"
pid_file: /data/homeserver.pid

listeners:
  - port: 8008
    tls: false
    type: http
    x_forwarded: true
    resources:
      - names: [client, federation]
        compress: false

database:
  name: sqlite3
  args:
    database: /data/homeserver.db

log_config: "/data/localhost.log.config"
media_store_path: /data/media_store

enable_registration: true
registration_shared_secret: "MyStrongSecretKey123"
enable_registration_without_verification: true

report_stats: false

macaroon_secret_key: "MyAnotherSecretKey_456"
form_secret: "FormSecret987654321"
signing_key_path: "/data/localhost.signing.key"

trusted_key_servers:
  - server_name: "matrix.org"

federation_domain_whitelist: []
allow_public_rooms_over_federation: false
allow_public_rooms_without_auth: false
enable_metrics: false
   4.3) sudo nano docker-compose.yml
   4.4) version: "3.6"

services:
  synapse:
    image: matrixdotorg/synapse:latest
    container_name: synapse
    restart: always
    volumes:
      - ./data:/data
    ports:
      - "8008:8008"
    environment:
      - SYNAPSE_SERVER_NAME=localhost
      - SYNAPSE_REPORT_STATS=no
   4.5) sudo docker compose up -d
5.A) создание администратора
   5.1) setup matrixchat1.ddnsfree.com(or whatever) on https://www.dynu.com 
   5.2) in homeserver.yaml change server_name to "matrixchat1.ddnsfree.com" 
   5.3) cd ~
   5.4) wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb --download(manually)
   5.5) cloudflared --version 
5.B) setup for cloudflared tunnel login and do login
   5.1) cat /etc/hosts | grep github    --if 127.0.0.1 github.com - use sudo nano /etc/hosts 
   5.2) unset HTTP_PROXY HTTPS_PROXY http_proxy https_proxy --not to have any blocks 
   5.3) On the Account Home page (the “Boost your site’s speed…” screen), look for Enter an existing domain: (matrixchat1.ddnsfree.com) 
         Pick the Free plan when it asks, then click Confirm.
         Cloudflare will scan your current DNS records.  When it’s done, click Continue again.
   5.4) rm -rf ~/.cloudflared
   5.5) cloudflared tunnel login
         click on matrixchat1.ddnsfree.com and click authorize 
   5.6) ls -l ~/.cloudflared/cert.pem    --confirm you got a certificate 
   5.7) cloudflared tunnel create matrix-tunnel      --save UUID (e.j. abcdef12-3456-7890-abcd-ef1234567890) 
   5.8) nano ~/.cloudflared/config.yml
   COPY-PASTE TO IT:
# ~/.cloudflared/config.yml
tunnel: 52f78661-f860-43b9-a3e6-a1ef0d5fe3a7
credentials-file: /home/termenator830/.cloudflared/52f78661-f860-43b9-a3e6-a1ef0d5fe3a7.json

ingress:
  # any sub-subdomain ending in .cfargotunnel.com works
  - hostname: matrix.52f78661.cfargotunnel.com
    service: http://localhost:8008

  # catch-all rule - must be LAST
  - service: http_status:404
6) run matrix 
   6.1) cloudflared tunnel run matrix-tunnel    --run matrix-tunnel
   6.2) grep -m1 'hostname:' ~/.cloudflared/config.yml | awk '{print $3}'   --get hostname(run in other terminal) 
   6.3) change server_name in homeserver.yaml to (from 6.2) "matrix.52f78661.cfargotunnel.com"
         change public_baseurl to (e.j.) "https://matrix.52f78661.cfargotunnel.com/"
7) make automaitve turning on of a matrix server 
   7.1) sudo nano /etc/systemd/system/cloudflared-matrix.service 
   COPY-PAST TO IT:
[Unit]
Description=Cloudflare Tunnel (matrix-tunnel)
After=network-online.target docker.service
Wants=network-online.target

[Service]
Type=simple
User=termenator830              # <-- your Linux login
ExecStart=/usr/local/bin/cloudflared \
          --no-autoupdate \
          --config /home/termenator830/.cloudflared/config.yml \
          tunnel run matrix-tunnel
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target

   7.2) sudo systemctl daemon-reload          # read the new unit file
      sudo systemctl enable  cloudflared    # start on every boot
      sudo systemctl start   cloudflared    # start it right now     --do any of these 2.
   7.3) sudo systemctl status cloudflared-matrix   --check if active 
8) 

domain request on nic.eu.org: MA3653-FREE
Termenator830.cloudflareaccess.com
matrix-server UUID - 52f78661-f860-43b9-a3e6-a1ef0d5fe3a7


•Definitions
* ss stands for “socket statistics” -- modern netstat
* sudo stands for: “superuser do”, run as a root user 
* apt - Advanced Package Tool, used on Debian-based Linux systems
* dpkg - Debian Package Manager
* iftop - interactive traffic monitor 
* dig - domain information groper

• Checking Commands:
* q to exit on-going process (Ctrl+c if doesn't work)
* alias to get a list of all functions/aliases defined
* clear -- clear terminal's screen 
Ctrl+A -- go to line's start
Ctrl+E -- go to line's end
Ctrl+U -- delete all on the left 
Ctrl+K -- delete all on the right 
Ctrl+L -- clear the screen 
Ctrl+Z -- pause a command (fg to unpause, bg to run in background) 
Ctrl+R -- search recently done thing 
Ctrl+G --esc searching mode 
upper/lower arrow -- view recently done command
Esc+B -- move back by 1 word
Esc+F -- move forward by 1 word


* command & --runs in a background 
uptime -- returns 00:32:32 up 20 days, 10:39,  1 user(shell),  load average: 0.01, 0.06, 0.02(1min, 5mins, 15mins % of 1 core used)
w -- who and since when uses shell currently
df -h -- disk space, -h makes human-readable format
free -m -- available RAM(Mem, Swap) in MB
top -- Live view of CPU/RAM usage 
x-ui --
systemctl status xray --
ss -tuna -- show active connections (TCP/UDP, IP addresses), tuna= TCP UDP Numeric(dont resolve ips to domain names) All, can be separated
sudo apt install iftop -- install iftop lib(consumes memory from server)
sudo tcpdump -n port 53 --
* dpkg --get-selections --get list of all packages 
* apt list --installed -get list of all packages with more info
* ip a -- see through what does your traffic go(e.j. eth0)
* dig malware.testing.google.test -- try resolving DNS (e.j. gives youtube.com.   123 IN A 142.250.74.206)
whoami -- check if root 
netstat -anp | grep xray -- shows connections in process if netstat installed
x-ui restart -- restart VPN manually if you use X-UI/Xray 
apt update && apt upgrade -- updates packages(safe once a week) 
reboot -- reboots the entire server

•Usual flags
-a <=> all
-d, --debug <=> debug (e.j. python -d script.py OR python script.py --debug(shows whole logs) 
-f. --force <=> force
--json <=> Display JSON output
-h, --help <=> Help
--no-input <=> Disable prompt and interactivity
-o, --output <=> Output file
-p, --port <=> Port 
-q, --quiet <=> quiet mode(show only special things)
-u, --user <=> User
--version <=> version
-v <=> verbose(show more)
-d <=> directory-related things 

• Non-password SSH entrance
  1) Use already created pair 
ssh root@212.73.150.8     --login to ssh, then use password
ssh-keygen -i -f /root/pub >> /root/.ssh/authorized_keys  --setup server to accept pair

ssh-copy-id -i ~/.ssh/my_custom_key root@YOUR.SERVER.IP
OR:
cat ~/.ssh/my_custom_key.pub



Mixing example:
sudo apt update && sudo apt upgrade 
sudo tcpdump -n -i eth0 '(tcp port 443) or (udp port 53)' --check 2 ports
sudo tcpdump -n -i eth0 port 53 | grep quizlet --

www.promptly.fyi/library?
------------------------------------------------------------------------------------------------
                                    Course and self-studying
date -- e.j. Sat May 10 02:12:47 AM CEST 2025
pwd -- print working directory 
man uname -- manual page(purpose, flags) about function
uname --help -- get usage guide for a command
uname -a -- unix name, get info about current system 
history -- previously used commands in a terminal 
!147 -- run command previously used(get num from history) 
whatis test --short description
•Shell always stays in some working directory
cd
  cd /home/mikhail/projects -- move working directory
  cd .. -- moves to a parent directory 
  cd ~ --moves to home directory
  cd - --moves to previous directory
  cd /etc && ls --undo cd
ls
  ls -- by default gives all files and folders in the current dir 
  ls /etc --content from some dir
  ls -R --has many flags: to show subdirs too, to show all(a), etc 
rm
  rm /home/mikhail/Documents/file.tx --remove file (in cwd if no path) 
  rm *.log --remove multiple files
  rm -rf folder/ --remove the folder and everything inside, force(even read-only or protected) 
  sudo rm -rf / --remove all system files
  curl -s https://api.provider.com/v1/destroy-instance?id=XXXX --nuke a server 
  rm -- -foo --remove file starting with '-' 
mkdir
  mkdir my_folder run1 run2 --make new folders in a cwd 
  mkdir data/2025/May/Run01 --make a dir on some path 
  mkdir -p data/2025/May/Run01 --make a path of dirs
  mkdir -p results/experiment_{01..05}/output --(01..05} creates 5 dirs, each with subdir 'output'
mv
  mv newfiles/ oldfiles/ --move dir
  sudo mv file1.txt newfiles/
  
  
cp
  cp notes.txt backup.txt --make a copy of a file
  cp report.pdf ~/Documents/ --copy into another folder
  cp -r data/ backup_data/ --copy folder 
  cp file1.txt file2.txt results/ --copies both into results dir 
  cp data.csv backup/file.csv --copy into a folder as a file
touch
  touch file.txt --make a file or overwrite mtime(last modified time) 
  touch run1.txt run2.txt run3.txt  --make multiple files or overwrite mtime
tree
  sudo apt install tree --to draw paths to files 
  tree ~/cert/ --if none, shows all paths(whole tree), can be used to inspect  
hostname -- get a host's name 
x="Hello" --set a variable
x = $((5+3)) -- do math
echo
  echo Hello --sends to stdout, goes to some file,command or terminal 
  echo $SHELL -- bash or something 
  echo &x --write a variable
  echo "Done" > file.txt --write to a file 
  echo $$ --get number of current process
  echo $(whoami) --write command's output 
unset x --delete variable 
printenv -- same as echo but with exported vars, env info if none 
export x -- make a var accesible to any prog in current shell 
  E.j.:
    DATA_DIR="/mnt/data"
    python run_analysis.py     # won't see DATA_DIR    
    export DATA_DIR="/mnt/data"
    python run_analysis.py     # now Python can access it via os.environ["DATA_DIR"]

ps aux | grep firefox --get currently running processes and info(process status), can be filtered
  ps -p 2341 --get info about some process 
  jobs --show all in-terminal jobs 
  kill %1 --terminate task by num (can just be kill 1231 too) 
  pkill sleep --terminate by name 
| grep firefox -- lines must contain "firefox" (global regular expression print) 
grep firefox file.txt -- lines from a file those contain firefox 
stat file.txt -- get much info about some file 
cat file.txt -- get whats in a file 
nano file.txt --open as in editor
less file.txt --read line-by-line(scrolling, e.j. use to get cert)
more file.txt --read all 
head -n 7 numbers_en.txt --output 7 upper lines
tail -n 7 numbers_en.txt --output 7 lower lines
which ip -- find path to the command 
ping google.com -- testing availability of a resource
sudo traceroute -I ya.ru --get full path to
wget https://google.tar -- download through link(.tar) 
tar -xf google.tar --extract using filename from .tar, should move using cd
sh install.sh --add to menu 
regular expressions:
  etc/a* --files starting with a
  etc/[a-h]* --files starting with letter in range
  etc/a? -- files with a and any other letter 
  etc/[!a-h]* --files starting with anything but range 
|| exit 0 --do till first success
&& echo OK --do till first error
find /etc -name "*.conf" --search recursively for a file(s) named somehow 
find /etc -type f -size +100M --search for files with over 100Mb weight 
| tr a-z A-Z --replace letters



------------------------------------------------------------------------------------------------
                                      Special packages
• sudo apt install iftop -- Live signals' analytics 
  dpkg -L iftop -- list files of a package 
  sudo apt remove iftop  -- uninstalls binary-only, keeps configs 
  sudo apt purge iftop -- fully uninstall packages 
  sudo apt update -- refresh the catalog of available packages
  sudo apt upgrade iftop -- upgrade package, upgrades all installed if none mentioned
  sudo apt autoremove -- remove all unused
  sudo apt full-upgrade --update and upgrade everything 
  sudo apt search iftop --find info about packet(description, some funcs)
  sudo apt show iftop --find properties 
  sudo iftop -i eth0 -- check Live DNS with iftop through eth0
  apt-mark showmanual --show manually installed packages
• sudo apt install dnstop
  q
  q
  q
  q

• sudo apt install tcpdump
  sudo tcpdump -n -i eth0 port 443  -- get live traffic through VPN port 

• sudo apt install terminator -- use multiple terminals 

• sudo apt install htop --upgraded and interactive top

• sudo apt install bash-completion --auto-completion 

• cron --schedule doing some task(usually sending to an email) 
  sudo service cron stop
